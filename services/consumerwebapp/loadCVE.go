package consumerwebapp

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"

	"consumerwebapp/types"

	"github.com/segmentio/kafka-go"
)

type LoadCVE struct {
	db     *sql.DB
	reader *kafka.Reader
}

func NewLoadCVE(db *sql.DB, reader *kafka.Reader) *LoadCVE {
	return &LoadCVE{
		db:     db,
		reader: reader,
	}
}

func (l *LoadCVE) InsertDB(jsonData []byte) (string, error) {
	parsedCVEData := GetCVEData(jsonData)
	pasedCVEID := GetCVEID(parsedCVEData)

	fmt.Println(pasedCVEID.CveID)

	// SQL query to insert data, avoiding duplicates based on cveId in cve_metadata
	query := "INSERT INTO cve.CVE (id, datatype, dataversion, cve_metadata, containers) VALUES ($1, $2, $3, $4::jsonb, $5::jsonb) ON CONFLICT (id) DO NOTHING;"

	// Execute the SQL query
	_, err := l.db.Exec(query, pasedCVEID.CveID, parsedCVEData.DataType, parsedCVEData.DataVersion, parsedCVEData.CveMetadata, parsedCVEData.Containers)
	if err != nil {
		return "", fmt.Errorf("failed to insert data: %v", err)
	}

	return "Data inserted successfully", nil
}

func GetCVEData(jsonData []byte) types.CVEData {
	var cveData types.CVEData
	err := json.Unmarshal(jsonData, &cveData)
	if err != nil {
		log.Fatal(err)
	}
	return cveData
}

func GetCVEID(parsedCVEData types.CVEData) types.CveMetadataID {
	var cveId types.CveMetadataID
	err := json.Unmarshal(parsedCVEData.CveMetadata, &cveId)
	if err != nil {
		log.Fatal(err)
	}
	return cveId
}
